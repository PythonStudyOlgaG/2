"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""
class ZError(Exception):
    def __init__(self):
        pass


class TypeCheck(ZError):
    def __init__(self):
        self.input_list = []

    def check_value(self):
        global int_val
        while True:
            try:
                try:
                    int_val = int(input('Введите числа, разделитель Enter: '))
                    exit_val = input(f'Всё отлично, добавляем "{int_val}" в список. Для оставновки ввода - n: ').lower()
                    self.input_list.append(int_val)
                    if exit_val == 'n':
                        print(self.input_list)
                        break
                except ValueError:
                    raise ZError
            except ZError:
                exit_val = input(f"Вы ввели не число! . Для оставновки ввода - n: ").lower()
                if exit_val == 'n':
                    print(self.input_list)
                    break
                else:
                    self.check_value()


example = TypeCheck()
example.check_value()